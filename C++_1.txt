//空间占用

char 1字节
short 2字节
int 4字节
long 4字节
float 4字节
double 8字节


char p[3][10];
sizeof(p) = 30//数组的大小

void fun(char p[][10])//第二维必须标明,实参与形参的第二维大小保持一致
{
    sizeof(p) = 4//地址的大小
}

char * p =  new char[10];
sizeof(p) = 4//地址的大小


union A
{
	int a;
	char b;
}//共用一个内存首地址  各种变量名都可以同时使用，操作也是共同生效
sizeof(A) = 4
//内存占用并没有优化多少  主要还是复用性增强

struct B
{
	char b;
	char e;
	int d;
};
sizeof(B) = 8
struct C
{
	char b;
	int d;
	char e;
};
sizeof(C) = 12//需要对齐后计算偏移量


//--------------------------------------------------------
void ChangeMem(char *p)
{
	p = (char *)malloc(100);
}
void test(void)
{
	char *str = null;
	ChangeMem(str);//并不能传递动态内存
	strcpy(str, "say looksword");//会崩溃
	printf(str);
}
//--------------------------------------------------------
char *ChangeMem(void)
{
	char p[] = "say looksword";
	return p;//指向"栈内存"的指针
}
char *ChangeMem2(void)
{
	char* p = "say looksword";
	return p;
}
void ChangeMem3(char **p, int num)
{
	*p = (char *)malloc(num);
}
void test(void)
{
	char *str = null;
	str = ChangeMem();//原内容已被清除,新内容不可知
	printf(str);//大概率是乱码
	
	char *str2 = null;
	str2 = ChangeMem2();
	printf(str2);//正常
	
	char *str = null;
	getmemory(&str, 100);
	strcpy(str, "GG");//内存泄露
	printf(str);
	
	char *str = (char *) malloc(100);
	strcpy(str, "GG");//free(str);之后,str 成为野指针
	free(str);
	if(str != null)
	{
	 strcpy(str, "Worst");//篡改动态内存区的内容,后果难以预料
	 printf(str);
	}
}
//--------------------------------------------------------
int b;//栈
char s[]="abc";//栈
char *p2;//栈
char *p3="123456";//"123456"在常量区，p3在栈上。
static int c=0;//全局（静态）初始化区
p1 = (char*)malloc(10);
p2 = (char*)malloc(20);　　 //分配得来得10和20字节的区域就在堆区。
strcpy(p1,"123456");　　 //"123456"放在常量区,编译器可能会将它与p3指向的"123456"优化成一个地方。
//--------------------------------------------------------
普通构造函数
拷贝构造函数
赋值函数
析构函数






